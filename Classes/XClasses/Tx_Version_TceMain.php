<?php
/***************************************************************
 * Copyright notice
 *
 * (c) 2012 Oliver Hader <oliver.hader@typo3.org>
 * All rights reserved
 *
 * This script is part of the TYPO3 project. The TYPO3 project is
 * free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license
 * from the author is found in LICENSE.txt distributed with these scripts.
 *
 * This script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

/**
 * @author Oliver Hader <oliver.hader@typo3.org>
 * @package EXT:irre_workspaces
 */
class ux_tx_version_tcemain extends tx_version_tcemain {
	/**
	 * @var Tx_Workspaces_Service_Stages
	 */
	protected $workspacesStagesService;

	/**
	 * @var Tx_IrreWorkspaces_Renderer_Notification_MessageRenderer
	 */
	protected $messageRenderer;

	/**
	 * @var string
	 */
	protected $messageTemplate;

	/**
	 * @var array
	 */
	protected $elementRecords = array();

	/**
	 * Send an email notification to users in workspace
	 *
	 * @param array $stat Workspace access array (from t3lib_userauthgroup::checkWorkspace())
	 * @param integer $stageId New Stage number: 0 = editing, 1= just ready for review, 10 = ready for publication, -1 = rejected!
	 * @param string $table Table name of element (or list of element names if $id is zero)
	 * @param integer $id Record uid of element (if zero, then $table is used as reference to element(s) alone)
	 * @param string $comment User comment sent along with action
	 * @param t3lib_TCEmain $tcemainObj TCEmain object
	 * @param array $notificationAlternativeRecipients List of recipients to notify instead of be_users selected by sys_workspace, list is generated by workspace extension module
	 * @return void
	 */
	protected function notifyStageChange(array $stat, $stageId, $table, $id, $comment, t3lib_TCEmain $tcemainObj, array $notificationAlternativeRecipients = array()) {
		$elements = $this->extractElements($table, $id);
		$linkData = array('workspaceId' => $stat['uid'], 'stageId' => $stageId);
		$data = $this->getElementData($elements, $linkData);

		$system = array(
			'httpHost' => t3lib_div::getIndpEnv('TYPO3_REQUEST_HOST'),
			'siteName' => $GLOBALS['TYPO3_CONF_VARS']['SYS']['sitename'],
		);

		$user = array(
			'uid' => $this->getBackendUser()->user['uid'],
			'realName' => $this->getBackendUser()->user['realName'],
			'username' => $this->getBackendUser()->user['username'],
			'email' => $this->getBackendUser()->user['email'],
			'title' => $this->getBackendUserTitle(),
		);

		$stage = array(
			'uid' => $stageId,
			'title' => $this->getWorkspacesStagesService()->getStageTitle($stageId),
		);

		// render
		// deliver

		$notificationMessage = $this->getMessageRenderer()
			->assign('system', $system)
			->assign('workspace', $stat)
			->assign('comment', trim($comment))
			->assign('stage', $stage)
			->assign('user', $user)
			->assign('data', $data)
			->render($this->getNotificationMessageTemplate());

		$notificationSubject = $this->getNotificationSubject();
		$notificationRecipients = array_map(
			array($this, 'getRecipientAddress'),
			$notificationAlternativeRecipients
		);

		$this->deliverMail(
			$notificationRecipients,
			$notificationSubject,
			$notificationMessage
		);
	}

	/**
	 * @param array|string $recipient
	 * @return string
	 */
	protected function getRecipientAddress($recipient) {
		$recipientAddress = $recipient;

		if (is_array($recipient) && isset($recipient['email'])) {
			$recipientAddress = $recipient['email'];
		}

		return $recipientAddress;
	}

	/**
	 * @param array $recipients
	 * @param string $subject
	 * @param string $message
	 */
	protected function deliverMail(array $recipients, $subject, $message) {
		foreach ($recipients as $recipient) {
			t3lib_div::plainMailEncoded(
				$recipient,
				$subject,
				$message
			);
		}
	}

	/**
	 * @param array $elements
	 * @param array $linkData
	 * @return array
	 */
	protected function getElementData(array $elements, array $linkData = array()) {
		$data = array(
			'paths' => array(),
		);

		foreach ($this->getElementIdsPerTable($elements) as $table => $ids) {
			// @todo Possibly check whether elements have been modified on workspace at all
			foreach ($this->getElementRecords($table, $ids) as $id => $record) {
				t3lib_BEfunc::fixVersioningPid($table, $record, TRUE);
				$pid = $record['pid'];

				if (!isset($data['paths'][$pid])) {
					$data['paths'][$pid] = array(
						'pid' => $pid,
						'title' => '',
						'url' => '',
						'tables' => array(),
					);
				}

				if (!isset($data['paths'][$pid]['tables'][$table])) {
					$data['paths'][$pid]['tables'][$table] = array(
						'table' => $table,
						'title' => $this->getTableTitle($table),
						'elements' => array(),
					);
				}

				$data['paths'][$pid]['tables'][$table]['elements'][$id] = array(
					'uid' => $record['uid'],
					'pid' => $record['pid'],
					'title' => t3lib_div::fixed_lgd_cs(
						t3lib_BEfunc::getRecordTitle($table, $record, FALSE),
						50
					),
				);
			}
		}

		foreach ($data['paths'] as $pid => &$path) {
			$path['title'] = t3lib_BEfunc::getRecordPath($pid, '', 20);
			$path['url'] = $this->generateLink($pid, $linkData);
		}

		return $data;
	}

	/**
	 * @param integer $pageId
	 * @param array $linkData
	 * @return string
	 */
	protected function generateLink($pageId, array $linkData = array()) {
		$domain = t3lib_BEfunc::getViewDomain($pageId);
		$path = '/typo3/mod.php?M=web_WorkspacesWorkspaces&id=' . $pageId .
			t3lib_div::implodeArrayForUrl('data', $linkData) .
			t3lib_div::implodeArrayForUrl('tx_workspaces_web_workspacesworkspaces', array('controller' => 'Preview'));
		$url = $domain . $path;

		return $domain . '/typo3/index.php?' . Tx_IrreWorkspaces_Service_RedirectService::getInstance()->getValueForUrl($url);
	}

	/**
	 * @param array $elements
	 * @return array
	 */
	protected function getElementIdsPerTable(array $elements) {
		$elementIdsByTable = array();

		foreach ($elements as $element) {
			$table = $element['table'];
			$id = $element['uid'];

			if (!isset($elementIdsByTable[$table])) {
				$elementIdsByTable[$table] = array();
			}

			if (!in_array($id, $elementIdsByTable[$table])) {
				$elementIdsByTable[$table][] = $id;
			}
		}

		return $elementIdsByTable;
	}

	/**
	 * @param string $table
	 * @param array $ids
	 * @return array
	 */
	protected function getElementRecords($table, array $ids) {
		$records = $this->getDatabase()->exec_SELECTgetRows(
			'*',
			$table,
			'uid IN (' . implode(',', array_map('intval', $ids)) . ')',
			'',
			'',
			'',
			'uid'
		);

		return (array) $records;
	}

	/**
	 * @param string $table
	 * @param string $id
	 * @return array
	 */
	protected function extractElements($table, $id) {
		$elements = array();

		if (strpos($table, ',') !== FALSE) {
			$items = t3lib_div::trimExplode(',', $table, TRUE);
			foreach ($items as $item) {
				$parts = t3lib_div::trimExplode(':', $item);
				$elements[] = array(
					'table' => $parts[0],
					'uid' => $parts[1],
				);
			}
		} elseif (strpos($table, ':') !== FALSE) {
			$parts = t3lib_div::trimExplode(':', $table);
			$elements[] = array(
				'table' => $parts[0],
				'uid' => $parts[1],
			);
		} else {
			$elements[] = array(
				'table' => $table,
				'uid' => $id,
			);
		}

		return $elements;
	}

	/**
	 * @return string
	 */
	protected function getBackendUserTitle() {
		$realName = $this->getBackendUser()->user['realName'];
		$userName = $this->getBackendUser()->user['username'];

		$title = $userName;

		if (!empty($realName)) {
			$title = $realName . ' (' . $userName . ')';
		}

		return $title;
	}

	/**
	 * @param string $table
	 * @return string
	 */
	protected function getTableTitle($table) {
		$title = $table;

		if (!empty($GLOBALS['TCA'][$table]['ctrl']['title'])) {
			$title = $this->getLanguage()->sl($GLOBALS['TCA'][$table]['ctrl']['title']) . ' (' . $table . ')';
		}

		return $title;
	}

	/**
	 * @return NULL|string
	 */
	protected function getNotificationSubject() {
		return Tx_IrreWorkspaces_Service_ConfigurationService::getInstance()->getNotificationSubject();
	}

	/**
	 * @return string
	 */
	protected function getNotificationMessageTemplate() {
		if (!isset($this->messageTemplate)) {
			$this->messageTemplate = t3lib_div::getURL(
				t3lib_div::getFileAbsFileName(
					Tx_IrreWorkspaces_Service_ConfigurationService::getInstance()->getNotificationMessageTemplate()
				)
			);
		}
		return $this->messageTemplate;
	}

	/**
	 * @return Tx_IrreWorkspaces_Renderer_Notification_MessageRenderer
	 */
	protected function getMessageRenderer() {
		if (!isset($this->messageRenderer)) {
			$this->messageRenderer = t3lib_div::makeInstance('Tx_IrreWorkspaces_Renderer_Notification_MessageRenderer');
		}
		return $this->messageRenderer;
	}

	/**
	 * @return Tx_Workspaces_Service_Stages
	 */
	protected function getWorkspacesStagesService() {
		if (!isset($this->workspacesStagesService)) {
			$this->workspacesStagesService = t3lib_div::makeInstance('Tx_Workspaces_Service_Stages');
		}
		return $this->workspacesStagesService;
	}

	/**
	 * @return language
	 */
	protected function getLanguage() {
		return $GLOBALS['LANG'];
	}

	/**
	 * @return t3lib_DB
	 */
	protected function getDatabase() {
		return $GLOBALS['TYPO3_DB'];
	}

	/**
	 * @return t3lib_beUserAuth
	 */
	protected function getBackendUser() {
		return $GLOBALS['BE_USER'];
	}
}

?>